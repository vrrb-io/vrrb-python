import json
import binascii

class TxnPool:
    def __init__(self):
        self.txn_map = {}
    
    def set_txn(self, txn):
        """
        Set a txn in the txn pool
        """
        self.txn_map[txn.id] = txn
    
    def existing_txn(self, address):
        """
        find a txn generated by an address in the txn pool
        """
        for txn in self.txn_map.values():
            if txn.input['address'] == address:
                return txn
    
    def txn_data(self):
        """
        return the txns from the txn pool represented in json serialized form
        """
        return(list(map(
            lambda txn: txn.to_json(),
            self.txn_map.values()
        )))
    
    def clear_txns(self, blockchain):
        for block in blockchain.chain:
            for txn in block.data:
                try:
                    del self.txn_map[txn['id']]
                except KeyError:
                    pass
    
    def to_json(self):
        return self.__dict__
    
    def to_bytes(self):
        txn_pool_json = self.to_json()
        txn_pool_bytes = bytes(json.dumps(txn_pool_json), 'utf-8')
        return b'0x' + binascii.hexlify(txn_pool_bytes)

    @staticmethod
    def from_bytes(txn_pool_bytes: bytearray):
        txn_pool_json = json.loads(binascii.unhexlify(
            txn_pool_bytes[2:].decode('utf-8')))
        return TxnPool.from_json(txn_pool_json)

    @staticmethod
    def from_json(txn_pool_json):
        return TxnPool(**txn_pool_json)

